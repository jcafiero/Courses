{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jcafiero/Code/CS554/Lab6/ChuckNorris/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jcafiero/Code/CS554/Lab6/ChuckNorris/client/src/components/AddQuote.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query {\\n    quotes {\\n      id\\n      quote\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation createQuote(\\n    $quote: String!\\n  ) {\\n    createQuote(\\n      input: {\\n        quote: $quote\\n      }\\n    ) {\\n      id\\n      quote\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport ReactModal from 'react-modal';\nimport gql from \"graphql-tag\";\nconst addQuoteQuery = gql(_templateObject());\nconst getAll = gql(_templateObject2());\nReactModal.setAppElement(\"#root\");\n\nclass AddQuote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showAddQuote: this.props.isOpen\n    };\n    this.handleOpenAddQuote = this.handleOpenAddQuote.bind(this);\n    this.handleCloseAddQuote = this.handleCloseAddQuote.bind(this);\n  }\n\n  handleOpenAddQuote() {\n    this.setState({\n      showAddQuote: true\n    });\n  }\n\n  handleCloseAddQuote() {\n    this.setState({\n      showAddQuote: false\n    });\n    this.props.handleClose(false);\n  }\n\n  render() {\n    let body;\n\n    if (this.props.modal === \"addQuote\") {\n      let quote;\n      body = React.createElement(Mutation, {\n        mutation: addQuoteQuery,\n        update: (cache, {\n          data: {\n            addQuote\n          }\n        }) => {\n          const _cache$readQuery = cache.readQuery({\n            query: getAll\n          }),\n                quotes = _cache$readQuery.quotes;\n\n          cache.writeQuery({\n            query: getAll,\n            data: {\n              quotes: quotes.concat([addQuote])\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, (addQuote, {\n        data\n      }) => React.createElement(\"form\", {\n        className: \"form\",\n        id: \"add-quote\",\n        onSubmit: e => {\n          e.preventDefault();\n          addQuote({\n            variables: {\n              quote: quote.value\n            }\n          });\n          quote.value = \"\";\n          this.setState({\n            showAddQuote: false\n          });\n          alert(\"Quote Added\");\n          this.props.handleClose();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Quote:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        ref: node => {\n          quote = node;\n        },\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Add Quote\")));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(ReactModal, {\n      name: \"addQuote\",\n      isOpen: this.state.showAddQuote,\n      contentLabel: \"Add Quote\",\n      className: \"quote-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, body, React.createElement(\"button\", {\n      className: \"btn cancel-button\",\n      onClick: this.handleCloseAddQuote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Cancel\")));\n  }\n\n}\n\nexport default AddQuote;","map":{"version":3,"sources":["/Users/jcafiero/Code/CS554/Lab6/ChuckNorris/client/src/components/AddQuote.js"],"names":["React","Component","Query","Mutation","ReactModal","gql","addQuoteQuery","getAll","setAppElement","AddQuote","constructor","props","state","showAddQuote","isOpen","handleOpenAddQuote","bind","handleCloseAddQuote","setState","handleClose","render","body","modal","quote","cache","data","addQuote","readQuery","query","quotes","writeQuery","concat","e","preventDefault","variables","value","alert","node"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,aAAa,GAAGD,GAAH,mBAAnB;AAeA,MAAME,MAAM,GAAGF,GAAH,oBAAZ;AASAD,UAAU,CAACI,aAAX,CAAyB,OAAzB;;AAEA,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AAC/BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,KAAKF,KAAL,CAAWG;AADd,KAAb;AAGA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKC,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBD,IAAzB,CAA8B,IAA9B,CAA3B;AACD;;AAEDD,EAAAA,kBAAkB,GAAG;AACnB,SAAKG,QAAL,CAAc;AAAEL,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACD;;AAEDI,EAAAA,mBAAmB,GAAG;AACpB,SAAKC,QAAL,CAAc;AAAEL,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACA,SAAKF,KAAL,CAAWQ,WAAX,CAAuB,KAAvB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAIC,IAAJ;;AACA,QAAI,KAAKV,KAAL,CAAWW,KAAX,KAAqB,UAAzB,EAAqC;AACnC,UAAIC,KAAJ;AACAF,MAAAA,IAAI,GACF,oBAAC,QAAD;AACE,QAAA,QAAQ,EAAEf,aADZ;AAEE,QAAA,MAAM,EAAE,CAACkB,KAAD,EAAQ;AAAEC,UAAAA,IAAI,EAAE;AAAEC,YAAAA;AAAF;AAAR,SAAR,KAAmC;AAAA,mCACtBF,KAAK,CAACG,SAAN,CAAgB;AACjCC,YAAAA,KAAK,EAAErB;AAD0B,WAAhB,CADsB;AAAA,gBACjCsB,MADiC,oBACjCA,MADiC;;AAIzCL,UAAAA,KAAK,CAACM,UAAN,CAAiB;AACfF,YAAAA,KAAK,EAAErB,MADQ;AAEfkB,YAAAA,IAAI,EAAE;AACJI,cAAAA,MAAM,EAAEA,MAAM,CAACE,MAAP,CAAc,CAACL,QAAD,CAAd;AADJ;AAFS,WAAjB;AAMD,SAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAcK,CAACA,QAAD,EAAW;AAAED,QAAAA;AAAF,OAAX,KACC;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,EAAE,EAAC,WAFL;AAGE,QAAA,QAAQ,EAAEO,CAAC,IAAI;AACbA,UAAAA,CAAC,CAACC,cAAF;AACAP,UAAAA,QAAQ,CAAC;AACPQ,YAAAA,SAAS,EAAE;AACTX,cAAAA,KAAK,EAAEA,KAAK,CAACY;AADJ;AADJ,WAAD,CAAR;AAKAZ,UAAAA,KAAK,CAACY,KAAN,GAAY,EAAZ;AACA,eAAKjB,QAAL,CAAc;AAAEL,YAAAA,YAAY,EAAE;AAAhB,WAAd;AACAuB,UAAAA,KAAK,CAAC,aAAD,CAAL;AACA,eAAKzB,KAAL,CAAWQ,WAAX;AACD,SAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAgBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAGE;AAAO,QAAA,GAAG,EAAEkB,IAAI,IAAI;AAClBd,UAAAA,KAAK,GAAGc,IAAR;AACD,SAFD;AAEG,QAAA,QAAQ,MAFX;AAGA,QAAA,SAAS,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CADF,CAhBF,EA2BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3BF,EA4BE;AAAQ,QAAA,SAAS,EAAC,KAAlB;AAAwB,QAAA,IAAI,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA5BF,CAfN,CADF;AAmDD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,MAAM,EAAE,KAAKzB,KAAL,CAAWC,YAFrB;AAGE,MAAA,YAAY,EAAC,WAHf;AAIE,MAAA,SAAS,EAAC,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGQ,IANH,EAOE;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AACE,MAAA,OAAO,EAAE,KAAKJ,mBADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CADF,CADF;AAiBD;;AA5F8B;;AA+FjC,eAAeR,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Query, Mutation } from 'react-apollo';\nimport ReactModal from 'react-modal';\nimport gql from \"graphql-tag\";\n\nconst addQuoteQuery = gql`\n  mutation createQuote(\n    $quote: String!\n  ) {\n    createQuote(\n      input: {\n        quote: $quote\n      }\n    ) {\n      id\n      quote\n    }\n  }\n`;\n\nconst getAll = gql`\n  query {\n    quotes {\n      id\n      quote\n    }\n  }\n`;\n\nReactModal.setAppElement(\"#root\");\n\nclass AddQuote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showAddQuote: this.props.isOpen\n    };\n    this.handleOpenAddQuote = this.handleOpenAddQuote.bind(this);\n    this.handleCloseAddQuote = this.handleCloseAddQuote.bind(this);\n  }\n\n  handleOpenAddQuote() {\n    this.setState({ showAddQuote: true });\n  }\n\n  handleCloseAddQuote() {\n    this.setState({ showAddQuote: false });\n    this.props.handleClose(false);\n  }\n\n  render() {\n    let body;\n    if (this.props.modal === \"addQuote\") {\n      let quote;\n      body = (\n        <Mutation \n          mutation={addQuoteQuery}\n          update={(cache, { data: { addQuote } }) => {\n            const { quotes } = cache.readQuery({\n              query: getAll\n            });\n            cache.writeQuery({\n              query: getAll,\n              data: {\n                quotes: quotes.concat([addQuote])\n              }\n            });\n          }}\n          >\n            {(addQuote, { data }) => (\n              <form \n                className=\"form\"\n                id=\"add-quote\"\n                onSubmit={e => {\n                  e.preventDefault();\n                  addQuote({\n                    variables: {\n                      quote: quote.value\n                    }\n                  });\n                  quote.value=\"\";\n                  this.setState({ showAddQuote: false});\n                  alert(\"Quote Added\");\n                  this.props.handleClose();\n                }}\n              >\n                <div className=\"form-group\">\n                  <label>\n                    Quote: \n                    <br />\n                    <input ref={node => {\n                      quote = node;\n                    }} required\n                    autoFocus={true}\n                    />\n                  </label>\n                </div>\n                <br />\n                <button className=\"btn\" type=\"submit\">\n                  Add Quote\n                </button>\n              </form>\n            )}\n          </Mutation>\n      );\n    }\n    return (\n      <div>\n        <ReactModal\n          name=\"addQuote\"\n          isOpen={this.state.showAddQuote}\n          contentLabel=\"Add Quote\"\n          className=\"quote-modal\"\n        >\n          {body}\n          <button className=\"btn cancel-button\"\n            onClick={this.handleCloseAddQuote}\n          >\n            Cancel\n          </button>\n        </ReactModal>\n      </div>\n    );\n  }\n}\n\nexport default AddQuote;\n"]},"metadata":{},"sourceType":"module"}
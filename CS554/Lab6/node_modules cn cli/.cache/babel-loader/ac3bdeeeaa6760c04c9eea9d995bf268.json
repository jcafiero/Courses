{"ast":null,"code":"var _jsxFileName = \"/Users/jcafiero/Code/CS554/Lab6/ChuckNorris/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; // / import its ApolloProvider component, and use it as a composing component around your App component\n\nimport { ApolloProvider } from \"react-apollo\";\n/*The ApolloClient class is used to create the client instance, and the HttpLink and InMemoryCache are used for its mandatory configurations. \nFirst, you can create a configured HttpLink instance, which will be fed to the Apollo Client creation.*/\n\nimport { ApolloClient } from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\"; // The uri is a mandatory value to define the only GraphQL API endpoint used by the Apollo Client.\n\nconst BASE_URL = \"http://localhost:3000\";\n/*\nhe http link is a terminating link that fetches GraphQL results from a GraphQL endpoint over an http connection. \nThe http link supports both POST and GET requests with the ability to change the http options on a per query basis. \nThis can be used for authentication, persisted queries, dynamic uris, and other granular updates.\n*/\n\nconst httpLink = new HttpLink({\n  uri: BASE_URL,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n/*create the cache as the place where the data is managed in Apollo Client. \nThe cache normalizes your data, caches requests to avoid duplicates, and makes it possible to read and write data to the cache. \n*/\n\nconst cache = new InMemoryCache(); //Finally, you can use both instantiated configurations, the link and the cache, to create the instance of the Apollo Client\n\nconst client = new ApolloClient({\n  link: httpLink,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  },\n  cache\n});\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n})), document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept();\n} // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/jcafiero/Code/CS554/Lab6/ChuckNorris/client/src/index.js"],"names":["React","ReactDOM","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","App","serviceWorker","BASE_URL","httpLink","uri","onError","networkError","graphQLErrors","console","log","cache","client","link","render","document","getElementById","module","hot","accept","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA;;;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,uBAAjB;AAEA;;;;;;AAKA,MAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAEF,QADuB;AAE5BG,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,KAAqC;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD;AAL2B,CAAb,CAAjB;AAQA;;;;AAGA,MAAMI,KAAK,GAAG,IAAIX,aAAJ,EAAd,C,CAEA;;AACA,MAAMY,MAAM,GAAG,IAAId,YAAJ,CAAiB;AAC9Be,EAAAA,IAAI,EAAET,QADwB;AAE9BE,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,KAAqC;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD,GAL6B;AAM9BI,EAAAA;AAN8B,CAAjB,CAAf;AASAf,QAAQ,CAACkB,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEF,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF;;AAOA,IAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,EAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX;AACD,C,CAED;AACA;AACA;;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// / import its ApolloProvider component, and use it as a composing component around your App component\nimport { ApolloProvider } from \"react-apollo\";\n\n/*The ApolloClient class is used to create the client instance, and the HttpLink and InMemoryCache are used for its mandatory configurations. \nFirst, you can create a configured HttpLink instance, which will be fed to the Apollo Client creation.*/\nimport { ApolloClient } from \"apollo-client\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// The uri is a mandatory value to define the only GraphQL API endpoint used by the Apollo Client.\nconst BASE_URL = \"http://localhost:3000\";\n\n/*\nhe http link is a terminating link that fetches GraphQL results from a GraphQL endpoint over an http connection. \nThe http link supports both POST and GET requests with the ability to change the http options on a per query basis. \nThis can be used for authentication, persisted queries, dynamic uris, and other granular updates.\n*/\nconst httpLink = new HttpLink({\n  uri: BASE_URL,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\n/*create the cache as the place where the data is managed in Apollo Client. \nThe cache normalizes your data, caches requests to avoid duplicates, and makes it possible to read and write data to the cache. \n*/\nconst cache = new InMemoryCache();\n\n//Finally, you can use both instantiated configurations, the link and the cache, to create the instance of the Apollo Client\nconst client = new ApolloClient({\n  link: httpLink,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  },\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"]},"metadata":{},"sourceType":"module"}